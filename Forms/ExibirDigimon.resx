<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /wA=
</value>
  </data>
</root>